---
- name: Get existing VMs
  ansible.builtin.shell: pvesh get /nodes/{{ ansible_facts.hostname }}/qemu --output-format json
  register: existing_vms
  changed_when: false
  failed_when: >
    template.vmid in existing_vms.stdout | from_json | json_query('[].vmid') and
    existing_vms.stdout | from_json | json_query(query) != [1]
  vars:
    query: "[?vmid == `{{ template.vmid }}`].template"

- name: Create new template
  when: >
    template.vmid not in existing_vms.stdout | from_json | json_query('[].vmid')
  block:
    - name: Create a new VM
      ansible.builtin.shell: >
        pvesh create /nodes/{{ ansible_facts.hostname }}/qemu
        --vmid {{ template.vmid }}
        --name {{ template.name }}
        --memory 2048
        --net0 virtio,bridge=vmbr0
      changed_when: true

    - name: Get cloudimg {{ template.cloud_image_url }}
      ansible.builtin.get_url:
        url: "{{ template.cloud_image_url }}"
        dest: /tmp
        mode: 0755
      register: downloaded_image

    - name: Import the downloaded disk
      ansible.builtin.shell: qm importdisk {{ template.vmid }} {{ downloaded_image.dest }} local-lvm
      changed_when: true

    - name: Get VM configuration
      ansible.builtin.shell: >
        pvesh get /nodes/{{ ansible_facts.hostname }}/qemu/{{ template.vmid }}/config --output-format json
      register: vm_config
      changed_when: false

    - name: Update VM configuration
      ansible.builtin.shell: >
        pvesh create /nodes/{{ ansible_facts.hostname }}/qemu/{{ template.vmid }}/config
        --scsihw virtio-scsi-pci
        --scsi0 {{ vm_config.stdout | from_json | json_query('unused0') }}
        --ide0 local-lvm:cloudinit
        --boot c
        --bootdisk scsi0
        --serial0 socket
        --vga serial0
      changed_when: true

    - name: Convert VM into a template
      ansible.builtin.shell: pvesh create /nodes/{{ ansible_facts.hostname }}/qemu/{{ template.vmid }}/template
      changed_when: true
