---
- name: Storage {{ storage_config.key }}> Get ISO images
  ansible.builtin.shell:
    pvesh get /nodes/{{ ansible_facts.hostname }}/storage/{{ storage_config.key }}/content
    --content iso
    --output-format json
  changed_when: false
  register: existing_iso_files

- name: Storage {{ storage_config.key }}> Update ISO images
  vars:
    iso_names: "{{ storage_config.value.isos | map('basename') }}"
    existing_iso_names:
      "{{ existing_iso_files.stdout | from_json | json_query('[].volid') | map('basename') }}"
  block:
    - name: Storage {{ storage_config.key }}> Download ISO images
      ansible.builtin.shell: >-
        pvesh create /nodes/{{ ansible_facts.hostname }}/storage/{{ storage_config.key }}/download-url
        --content iso
        --filename {{ iso | basename }}
        --url {{ iso }}
      when: iso | basename not in existing_iso_names
      with_items: "{{ storage_config.value.isos }}"
      loop_control:
        loop_var: iso

    - name: Storage {{ storage_config.key }}> Delete ISO images
      ansible.builtin.shell: >-
        pvesh delete /nodes/{{ ansible_facts.hostname }}/storage/{{ storage_config.key }}/content/{{ iso }}
      when: vm_iso_remove_unreferenced and iso | basename not in iso_names
      with_items: "{{ existing_iso_files.stdout | from_json | json_query('[].volid') }}"
      loop_control:
        loop_var: iso
