---
- name: Get existing VM configuration
  ansible.builtin.shell: >-
    pvesh get /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.vmid }}/config --output-format json
  register: vm_config
  changed_when: false

- name: Update VM configuration
  vars:
    sshkeys: "{{ vm.ssh_keys | urlencode | replace('/', '%2f') }}"
    netcfg: "ip={{ vm.network.cidr }},gw={{ vm.network.gateway }}"
  ansible.builtin.shell: >-
    pvesh create /nodes/{{ ansible_facts.hostname }}/qemu/{{ vm.vmid }}/config
    --name {{ vm.name }}
    --cores {{ vm.cpus }}
    --memory {{ vm.memory }}
    --onboot {{ vm.onboot | default(false) }}
    --ciuser {{ vm.user }}
    --sshkeys {{ sshkeys }}
    --ipconfig0 {{ netcfg }}
  when: >-
    vm_config.stdout | from_json | json_query('name') != vm.name or
    vm_config.stdout | from_json | json_query('cores') != vm.cpus or
    vm_config.stdout | from_json | json_query('memory') != vm.memory or
    vm_config.stdout | from_json | json_query('onboot') | bool != vm.onboot or
    vm_config.stdout | from_json | json_query('ciuser') != vm.user or
    vm_config.stdout | from_json | json_query('sshkeys') != sshkeys or
    vm_config.stdout | from_json | json_query('ipconfig0') != netcfg
  changed_when: true

- name: Resize VM disks
  ansible.builtin.include_tasks: storage.yml
  vars:
    existing_vm_config: "{{ vm_config.stdout | from_json }}"
  with_items: "{{ vm.storage }}"
  loop_control:
    loop_var: storage

- name: Configure snapshots
  ansible.builtin.include_tasks: configure_snapshots_for_vm.yml
  vars:
    vmid: "{{ vm.vmid }}"
    snapshots: "{{ vm.snapshots }}"
  when: vm.snapshots is defined
